program        -> statement* EOF ;
declaration    -> varDecl | statement ;
statement      -> exprStmt | printStmt | block ;
block          -> "{" declaration* "}" ;
exprStmt       -> expression ";" ;
printStmt      -> "print" expression ";" ;
// comma          → expression ( "," expression )* ;
varDecl        -> "var" IDENTIFIER ( "=" expression )? ";" ;
expression     → assignment ;
assignment     -> IDENTIFIER "=" assignment | equality ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
ternary        → comparsion ( "?" (ternary | comparison) ":" (ternary | comparison))* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | primary ;
primary        → NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"  | IDENTIFIER;
               