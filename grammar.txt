program        -> statement* EOF ;
declaration    -> classDecl | funDecl | varDecl | statement ;
statement      -> exprStmt | forStmt | ifStmt | printStmt | returnStmt | whileStmt | block ;
block          -> "{" declaration* "}" ;
exprStmt       -> expression ";" ;
forStmt        -> "for" "(" (varDecl | exprStmt | ";" ) expression? ";" expression? ")" statement ;
ifStmt         -> "if" "(" expression ")" statement ( "else" statement )? ;
printStmt      -> "print" expression ";" ;
whileStmt      -> "while" "(" expression ")" statement ;
returnStmt     -> "return" expression? ";" ;
// comma          → expression ( "," expression )* ;
classDecl      -> "class" IDENTIFIER "{" function* "}"
funDecl        -> "fun" function ;
function       -> IDENTIFIER "(" parameters? ")" block ;
parameters     -> IDENTIFIER ( "," IDENTIFIER )* ;
varDecl        -> "var" IDENTIFIER ( "=" expression )? ";" ;
arguments      -> expression ("," expression)* ;
expression     → assignment ;
assignment     -> ( call "." )? IDENTIFIER "=" assignment | logic_or ;
logic_or       -> logic_and ( "or" logic_and )* ;
logic_and      -> equality ( "and" equality )* ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
ternary        → comparsion ( "?" (ternary | comparison) ":" (ternary | comparison))* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | primary ;
call           -> primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
primary        → NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")"  | IDENTIFIER;
               